/*
 * Visier Data Intake APIs
 * Visier APIs for sending raw or untransformed source data to Visier
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.GetProcessingJobsResponse;
import com.konfigthis.client.model.PushDataCancelResponse;
import com.konfigthis.client.model.PushDataCompleteRequest;
import com.konfigthis.client.model.PushDataCompleteResponse;
import com.konfigthis.client.model.PushDataResponse;
import com.konfigthis.client.model.PushDataSourceDefinitionsDTO;
import com.konfigthis.client.model.ReceivingJobStatusResponse;
import com.konfigthis.client.model.StartTransferResponse;
import com.konfigthis.client.model.Status;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataIntakeApi
 */
@Disabled
public class DataIntakeApiTest {

    private static DataIntakeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DataIntakeApi(apiClient);
    }

    /**
     * Retrieve processing job statuses by receiving job ID
     *
     * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.   Processing jobs deal with an individual analytic tenant&#39;s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProcessingJobsByParentReceivingJobIdTest() throws ApiException {
        String receivingJobId = null;
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        GetProcessingJobsResponse response = api.getProcessingJobsByParentReceivingJobId(receivingJobId)
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of sources
     *
     * Prior to transferring data to Visier, you must identify the sources you want to target. Sources store data for  the solution and are used to map data to Visier&#39;s data model.   Note: To set up sources in your tenant, contact Visier Customer Success.  This API allows you to query the list of available sources, and identify the source schema and required fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourcesTest() throws ApiException {
        PushDataSourceDefinitionsDTO response = api.getSources()
                .execute();
        // TODO: test validations
    }

    /**
     * Transfer data to sources via JSON
     *
     * This API allows you to transfer data to Visier in batches of records. Each request includes a batch of records  formatted as a comma separated array with the first row containing the column headers in the request body. Each  subsequent request should also include the first row as a header.   Each request transfers a batch of records to a single source. Transfer sessions may include one or more batches before completion.   Each batch is identified by a sequence number. Sequence numbers help identify any batches  that were delivered incorrectly.   Each batch is limited to the following request size:  - Batch size limit: 10 MB  - Record count limit: 300,000 rows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushDataTest() throws ApiException {
        String transferSessionId = null;
        String sourceId = null;
        Integer sequence = null;
        String tenantCode = null;
        PushDataResponse response = api.pushData(transferSessionId)
                .sourceId(sourceId)
                .sequence(sequence)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a transfer session
     *
     * This API allows you to cancel a transfer session after starting it. If a transfer session is cancelled, all  records within the transfer session do not persist in Visier’s data store.   If you cancel a transfer session, please start a new transfer session and resend the complete data set.   You might cancel a transfer session if:  - A request to send a batch of records failed.  - The original set of records is incomplete.  - An infrastructure error occurs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushDataCancelTest() throws ApiException {
        String transferSessionId = null;
        PushDataCancelResponse response = api.pushDataCancel(transferSessionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Complete a transfer session
     *
     * This API allows you to complete the specified transfer session by triggering a receiving job. A receiving job  validates the transferred data and adds the transferred data to Visier’s data store.   You can set an optional parameter to generate a data version through a processing job immediately after the receiving job completes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushDataCompleteTest() throws ApiException {
        String transferSessionId = null;
        Boolean processingData = null;
        PushDataCompleteResponse response = api.pushDataComplete()
                .transferSessionId(transferSessionId)
                .processingData(processingData)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a receiving job’s status
     *
     * After completing a transfer session, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier’s data store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void receivingJobStatusTest() throws ApiException {
        String receivingJobId = null;
        Boolean jobs = null;
        String tenantCode = null;
        Integer start = null;
        Integer limit = null;
        ReceivingJobStatusResponse response = api.receivingJobStatus(receivingJobId)
                .jobs(jobs)
                .tenantCode(tenantCode)
                .start(start)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Start a transfer session
     *
     * Use this API to start a new transfer session. A transfer session can include one or more batches of records to be  sent to Visier. Batches of records may be transferred as JSON or file payloads.   Recommended: For optimal performance, please include all batches of records in a single transfer session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTransferTest() throws ApiException {
        StartTransferResponse response = api.startTransfer()
                .execute();
        // TODO: test validations
    }

    /**
     * Transfer data to sources via file upload
     *
     * This API allows you to upload data to Visier as CSV or ZIP files. Each request transfers a single file. If the  data intended for Visier is stored in multiple files, you may compress them into a single ZIP file or make  multiple requests within the same transfer session.   File size limit: 3 GB   Each file is identified by a sequence number. Sequence numbers help identify any batches that were delivered incorrectly.   If you define a specific source in the request, all files within the request will target the declared source. If  a source is not defined, the filenames are matched against the source regex to correctly assign each file to a  source. To find out the source regex, please contact Visier Customer Success.   Note: If you include files that should target multiple sources in one ZIP file, do not define a source in the request.   Analytic tenants: For optimal transfer speed, provide one ZIP file per source.  Administrating tenants: For optimal transfer speed, provide one ZIP file containing all the required data files for your analytic tenants.  In the ZIP file, use one folder per analytic tenant. The ZIP file must adhere to the following file structure:   File1.zip  - Folder1: WFF_tenantCode1     - Filename1.csv     - Filename2.csv  - Folder2: WFF_tenantCode2     - Filename3.csv     - Filename4.csv
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDataTest() throws ApiException {
        String transferSessionId = null;
        String sourceId = null;
        String sequence = null;
        String tenantCode = null;
        PushDataResponse response = api.uploadData(transferSessionId)
                .sourceId(sourceId)
                .sequence(sequence)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

}
