/*
 * Visier Data Intake APIs
 * Visier APIs for sending raw or untransformed source data to Visier
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetProcessingJobsResponse;
import com.konfigthis.client.model.PushDataCancelResponse;
import com.konfigthis.client.model.PushDataCompleteRequest;
import com.konfigthis.client.model.PushDataCompleteResponse;
import com.konfigthis.client.model.PushDataResponse;
import com.konfigthis.client.model.PushDataSourceDefinitionsDTO;
import com.konfigthis.client.model.ReceivingJobStatusResponse;
import com.konfigthis.client.model.StartTransferResponse;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DataIntakeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataIntakeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DataIntakeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getProcessingJobsByParentReceivingJobIdCall(String receivingJobId, String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/processing-jobs/{receivingJobId}"
            .replace("{" + "receivingJobId" + "}", localVarApiClient.escapeString(receivingJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessingJobsByParentReceivingJobIdValidateBeforeCall(String receivingJobId, String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'receivingJobId' is set
        if (receivingJobId == null) {
            throw new ApiException("Missing the required parameter 'receivingJobId' when calling getProcessingJobsByParentReceivingJobId(Async)");
        }

        return getProcessingJobsByParentReceivingJobIdCall(receivingJobId, tenantCode, limit, start, _callback);

    }


    private ApiResponse<GetProcessingJobsResponse> getProcessingJobsByParentReceivingJobIdWithHttpInfo(String receivingJobId, String tenantCode, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getProcessingJobsByParentReceivingJobIdValidateBeforeCall(receivingJobId, tenantCode, limit, start, null);
        Type localVarReturnType = new TypeToken<GetProcessingJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProcessingJobsByParentReceivingJobIdAsync(String receivingJobId, String tenantCode, Integer limit, Integer start, final ApiCallback<GetProcessingJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessingJobsByParentReceivingJobIdValidateBeforeCall(receivingJobId, tenantCode, limit, start, _callback);
        Type localVarReturnType = new TypeToken<GetProcessingJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProcessingJobsByParentReceivingJobIdRequestBuilder {
        private final String receivingJobId;
        private String tenantCode;
        private Integer limit;
        private Integer start;

        private GetProcessingJobsByParentReceivingJobIdRequestBuilder(String receivingJobId) {
            this.receivingJobId = receivingJobId;
        }

        /**
         * Set tenantCode
         * @param tenantCode The tenant code of the tenant you want to retrieve the processing jobs for. Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return GetProcessingJobsByParentReceivingJobIdRequestBuilder
         */
        public GetProcessingJobsByParentReceivingJobIdRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of processing jobs to retrieve per page. (optional)
         * @return GetProcessingJobsByParentReceivingJobIdRequestBuilder
         */
        public GetProcessingJobsByParentReceivingJobIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return GetProcessingJobsByParentReceivingJobIdRequestBuilder
         */
        public GetProcessingJobsByParentReceivingJobIdRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for getProcessingJobsByParentReceivingJobId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProcessingJobsByParentReceivingJobIdCall(receivingJobId, tenantCode, limit, start, _callback);
        }


        /**
         * Execute getProcessingJobsByParentReceivingJobId request
         * @return GetProcessingJobsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public GetProcessingJobsResponse execute() throws ApiException {
            ApiResponse<GetProcessingJobsResponse> localVarResp = getProcessingJobsByParentReceivingJobIdWithHttpInfo(receivingJobId, tenantCode, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProcessingJobsByParentReceivingJobId request with HTTP info returned
         * @return ApiResponse&lt;GetProcessingJobsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetProcessingJobsResponse> executeWithHttpInfo() throws ApiException {
            return getProcessingJobsByParentReceivingJobIdWithHttpInfo(receivingJobId, tenantCode, limit, start);
        }

        /**
         * Execute getProcessingJobsByParentReceivingJobId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetProcessingJobsResponse> _callback) throws ApiException {
            return getProcessingJobsByParentReceivingJobIdAsync(receivingJobId, tenantCode, limit, start, _callback);
        }
    }

    /**
     * Retrieve processing job statuses by receiving job ID
     * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.   Processing jobs deal with an individual analytic tenant&#39;s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
     * @param receivingJobId The receiving job ID. (required)
     * @return GetProcessingJobsByParentReceivingJobIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetProcessingJobsByParentReceivingJobIdRequestBuilder getProcessingJobsByParentReceivingJobId(String receivingJobId) throws IllegalArgumentException {
        if (receivingJobId == null) throw new IllegalArgumentException("\"receivingJobId\" is required but got null");
            

        return new GetProcessingJobsByParentReceivingJobIdRequestBuilder(receivingJobId);
    }
    private okhttp3.Call getSourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSourcesCall(_callback);

    }


    private ApiResponse<PushDataSourceDefinitionsDTO> getSourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PushDataSourceDefinitionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSourcesAsync(final ApiCallback<PushDataSourceDefinitionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PushDataSourceDefinitionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSourcesRequestBuilder {

        private GetSourcesRequestBuilder() {
        }

        /**
         * Build call for getSources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSourcesCall(_callback);
        }


        /**
         * Execute getSources request
         * @return PushDataSourceDefinitionsDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PushDataSourceDefinitionsDTO execute() throws ApiException {
            ApiResponse<PushDataSourceDefinitionsDTO> localVarResp = getSourcesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSources request with HTTP info returned
         * @return ApiResponse&lt;PushDataSourceDefinitionsDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PushDataSourceDefinitionsDTO> executeWithHttpInfo() throws ApiException {
            return getSourcesWithHttpInfo();
        }

        /**
         * Execute getSources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PushDataSourceDefinitionsDTO> _callback) throws ApiException {
            return getSourcesAsync(_callback);
        }
    }

    /**
     * Retrieve a list of sources
     * Prior to transferring data to Visier, you must identify the sources you want to target. Sources store data for  the solution and are used to map data to Visier&#39;s data model.   Note: To set up sources in your tenant, contact Visier Customer Success.  This API allows you to query the list of available sources, and identify the source schema and required fields.
     * @return GetSourcesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetSourcesRequestBuilder getSources() throws IllegalArgumentException {
        return new GetSourcesRequestBuilder();
    }
    private okhttp3.Call pushDataCall(String transferSessionId, String body, String sourceId, Integer sequence, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/op/data-transfer-sessions/{transferSessionId}/add"
            .replace("{" + "transferSessionId" + "}", localVarApiClient.escapeString(transferSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        if (sequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequence", sequence));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushDataValidateBeforeCall(String transferSessionId, String body, String sourceId, Integer sequence, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferSessionId' is set
        if (transferSessionId == null) {
            throw new ApiException("Missing the required parameter 'transferSessionId' when calling pushData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pushData(Async)");
        }

        return pushDataCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);

    }


    private ApiResponse<PushDataResponse> pushDataWithHttpInfo(String transferSessionId, String body, String sourceId, Integer sequence, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = pushDataValidateBeforeCall(transferSessionId, body, sourceId, sequence, tenantCode, null);
        Type localVarReturnType = new TypeToken<PushDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pushDataAsync(String transferSessionId, String body, String sourceId, Integer sequence, String tenantCode, final ApiCallback<PushDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushDataValidateBeforeCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PushDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PushDataRequestBuilder {
        private final String transferSessionId;
        private String sourceId;
        private Integer sequence;
        private String tenantCode;
        private String body;

        private PushDataRequestBuilder(String transferSessionId) {
            this.transferSessionId = transferSessionId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return PushDataRequestBuilder
         */
        public PushDataRequestBuilder body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId The unique identifier associated with the source you want to transfer data to. (optional)
         * @return PushDataRequestBuilder
         */
        public PushDataRequestBuilder sourceId(String sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set sequence
         * @param sequence The unique sequence number associated with a batch of records. (optional)
         * @return PushDataRequestBuilder
         */
        public PushDataRequestBuilder sequence(Integer sequence) {
            this.sequence = sequence;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The code of the tenant you want to transfer data to. For example, WFF_j1r or WFF_j1r~c7o. (optional)
         * @return PushDataRequestBuilder
         */
        public PushDataRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for pushData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            String body = buildBodyParams();
            return pushDataCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        }

        private String buildBodyParams() {
            return this.body;
        }

        /**
         * Execute pushData request
         * @return PushDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PushDataResponse execute() throws ApiException {
            String body = buildBodyParams();
            ApiResponse<PushDataResponse> localVarResp = pushDataWithHttpInfo(transferSessionId, body, sourceId, sequence, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pushData request with HTTP info returned
         * @return ApiResponse&lt;PushDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PushDataResponse> executeWithHttpInfo() throws ApiException {
            String body = buildBodyParams();
            return pushDataWithHttpInfo(transferSessionId, body, sourceId, sequence, tenantCode);
        }

        /**
         * Execute pushData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PushDataResponse> _callback) throws ApiException {
            String body = buildBodyParams();
            return pushDataAsync(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        }
    }

    /**
     * Transfer data to sources via JSON
     * This API allows you to transfer data to Visier in batches of records. Each request includes a batch of records  formatted as a comma separated array with the first row containing the column headers in the request body. Each  subsequent request should also include the first row as a header.   Each request transfers a batch of records to a single source. Transfer sessions may include one or more batches before completion.   Each batch is identified by a sequence number. Sequence numbers help identify any batches  that were delivered incorrectly.   Each batch is limited to the following request size:  - Batch size limit: 10 MB  - Record count limit: 300,000 rows
     * @param transferSessionId The transfer session ID returned after the data transfer session starts. (required)
     * @param body  (required)
     * @return PushDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PushDataRequestBuilder pushData(String transferSessionId) throws IllegalArgumentException {
        if (transferSessionId == null) throw new IllegalArgumentException("\"transferSessionId\" is required but got null");
            

        return new PushDataRequestBuilder(transferSessionId);
    }
    private okhttp3.Call pushDataCancelCall(String transferSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-transfer-sessions/{transferSessionId}/cancel"
            .replace("{" + "transferSessionId" + "}", localVarApiClient.escapeString(transferSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushDataCancelValidateBeforeCall(String transferSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferSessionId' is set
        if (transferSessionId == null) {
            throw new ApiException("Missing the required parameter 'transferSessionId' when calling pushDataCancel(Async)");
        }

        return pushDataCancelCall(transferSessionId, _callback);

    }


    private ApiResponse<PushDataCancelResponse> pushDataCancelWithHttpInfo(String transferSessionId) throws ApiException {
        okhttp3.Call localVarCall = pushDataCancelValidateBeforeCall(transferSessionId, null);
        Type localVarReturnType = new TypeToken<PushDataCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pushDataCancelAsync(String transferSessionId, final ApiCallback<PushDataCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushDataCancelValidateBeforeCall(transferSessionId, _callback);
        Type localVarReturnType = new TypeToken<PushDataCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PushDataCancelRequestBuilder {
        private final String transferSessionId;

        private PushDataCancelRequestBuilder(String transferSessionId) {
            this.transferSessionId = transferSessionId;
        }

        /**
         * Build call for pushDataCancel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pushDataCancelCall(transferSessionId, _callback);
        }


        /**
         * Execute pushDataCancel request
         * @return PushDataCancelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PushDataCancelResponse execute() throws ApiException {
            ApiResponse<PushDataCancelResponse> localVarResp = pushDataCancelWithHttpInfo(transferSessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pushDataCancel request with HTTP info returned
         * @return ApiResponse&lt;PushDataCancelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PushDataCancelResponse> executeWithHttpInfo() throws ApiException {
            return pushDataCancelWithHttpInfo(transferSessionId);
        }

        /**
         * Execute pushDataCancel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PushDataCancelResponse> _callback) throws ApiException {
            return pushDataCancelAsync(transferSessionId, _callback);
        }
    }

    /**
     * Cancel a transfer session
     * This API allows you to cancel a transfer session after starting it. If a transfer session is cancelled, all  records within the transfer session do not persist in Visier’s data store.   If you cancel a transfer session, please start a new transfer session and resend the complete data set.   You might cancel a transfer session if:  - A request to send a batch of records failed.  - The original set of records is incomplete.  - An infrastructure error occurs.
     * @param transferSessionId The transfer session ID to cancel. (required)
     * @return PushDataCancelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PushDataCancelRequestBuilder pushDataCancel(String transferSessionId) throws IllegalArgumentException {
        if (transferSessionId == null) throw new IllegalArgumentException("\"transferSessionId\" is required but got null");
            

        return new PushDataCancelRequestBuilder(transferSessionId);
    }
    private okhttp3.Call pushDataCompleteCall(PushDataCompleteRequest pushDataCompleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushDataCompleteRequest;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/receiving-jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushDataCompleteValidateBeforeCall(PushDataCompleteRequest pushDataCompleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pushDataCompleteRequest' is set
        if (pushDataCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'pushDataCompleteRequest' when calling pushDataComplete(Async)");
        }

        return pushDataCompleteCall(pushDataCompleteRequest, _callback);

    }


    private ApiResponse<PushDataCompleteResponse> pushDataCompleteWithHttpInfo(PushDataCompleteRequest pushDataCompleteRequest) throws ApiException {
        okhttp3.Call localVarCall = pushDataCompleteValidateBeforeCall(pushDataCompleteRequest, null);
        Type localVarReturnType = new TypeToken<PushDataCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pushDataCompleteAsync(PushDataCompleteRequest pushDataCompleteRequest, final ApiCallback<PushDataCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushDataCompleteValidateBeforeCall(pushDataCompleteRequest, _callback);
        Type localVarReturnType = new TypeToken<PushDataCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PushDataCompleteRequestBuilder {
        private String transferSessionId;
        private Boolean processingData;

        private PushDataCompleteRequestBuilder() {
        }

        /**
         * Set transferSessionId
         * @param transferSessionId The unique identifier associated with the transfer session. (optional)
         * @return PushDataCompleteRequestBuilder
         */
        public PushDataCompleteRequestBuilder transferSessionId(String transferSessionId) {
            this.transferSessionId = transferSessionId;
            return this;
        }
        
        /**
         * Set processingData
         * @param processingData If true, a processing job will be triggered after the receiving job successfully completes. This generates a new data version. (optional)
         * @return PushDataCompleteRequestBuilder
         */
        public PushDataCompleteRequestBuilder processingData(Boolean processingData) {
            this.processingData = processingData;
            return this;
        }
        
        /**
         * Build call for pushDataComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PushDataCompleteRequest pushDataCompleteRequest = buildBodyParams();
            return pushDataCompleteCall(pushDataCompleteRequest, _callback);
        }

        private PushDataCompleteRequest buildBodyParams() {
            PushDataCompleteRequest pushDataCompleteRequest = new PushDataCompleteRequest();
            pushDataCompleteRequest.transferSessionId(this.transferSessionId);
            pushDataCompleteRequest.processingData(this.processingData);
            return pushDataCompleteRequest;
        }

        /**
         * Execute pushDataComplete request
         * @return PushDataCompleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PushDataCompleteResponse execute() throws ApiException {
            PushDataCompleteRequest pushDataCompleteRequest = buildBodyParams();
            ApiResponse<PushDataCompleteResponse> localVarResp = pushDataCompleteWithHttpInfo(pushDataCompleteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pushDataComplete request with HTTP info returned
         * @return ApiResponse&lt;PushDataCompleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PushDataCompleteResponse> executeWithHttpInfo() throws ApiException {
            PushDataCompleteRequest pushDataCompleteRequest = buildBodyParams();
            return pushDataCompleteWithHttpInfo(pushDataCompleteRequest);
        }

        /**
         * Execute pushDataComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PushDataCompleteResponse> _callback) throws ApiException {
            PushDataCompleteRequest pushDataCompleteRequest = buildBodyParams();
            return pushDataCompleteAsync(pushDataCompleteRequest, _callback);
        }
    }

    /**
     * Complete a transfer session
     * This API allows you to complete the specified transfer session by triggering a receiving job. A receiving job  validates the transferred data and adds the transferred data to Visier’s data store.   You can set an optional parameter to generate a data version through a processing job immediately after the receiving job completes.
     * @param pushDataCompleteRequest  (required)
     * @return PushDataCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public PushDataCompleteRequestBuilder pushDataComplete() throws IllegalArgumentException {
        return new PushDataCompleteRequestBuilder();
    }
    private okhttp3.Call receivingJobStatusCall(String receivingJobId, Boolean jobs, String tenantCode, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/receiving-jobs/{receivingJobId}"
            .replace("{" + "receivingJobId" + "}", localVarApiClient.escapeString(receivingJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobs", jobs));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receivingJobStatusValidateBeforeCall(String receivingJobId, Boolean jobs, String tenantCode, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'receivingJobId' is set
        if (receivingJobId == null) {
            throw new ApiException("Missing the required parameter 'receivingJobId' when calling receivingJobStatus(Async)");
        }

        return receivingJobStatusCall(receivingJobId, jobs, tenantCode, start, limit, _callback);

    }


    private ApiResponse<ReceivingJobStatusResponse> receivingJobStatusWithHttpInfo(String receivingJobId, Boolean jobs, String tenantCode, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = receivingJobStatusValidateBeforeCall(receivingJobId, jobs, tenantCode, start, limit, null);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call receivingJobStatusAsync(String receivingJobId, Boolean jobs, String tenantCode, Integer start, Integer limit, final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receivingJobStatusValidateBeforeCall(receivingJobId, jobs, tenantCode, start, limit, _callback);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReceivingJobStatusRequestBuilder {
        private final String receivingJobId;
        private Boolean jobs;
        private String tenantCode;
        private Integer start;
        private Integer limit;

        private ReceivingJobStatusRequestBuilder(String receivingJobId) {
            this.receivingJobId = receivingJobId;
        }

        /**
         * Set jobs
         * @param jobs If true, returns the status of receiving jobs spawned by the receiving job specified by receivingJobId. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder jobs(Boolean jobs) {
            this.jobs = jobs;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of the tenant you want to retrieve the receiving jobs for. Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of job statuses to return per page. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for receivingJobStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return receivingJobStatusCall(receivingJobId, jobs, tenantCode, start, limit, _callback);
        }


        /**
         * Execute receivingJobStatus request
         * @return ReceivingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ReceivingJobStatusResponse execute() throws ApiException {
            ApiResponse<ReceivingJobStatusResponse> localVarResp = receivingJobStatusWithHttpInfo(receivingJobId, jobs, tenantCode, start, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute receivingJobStatus request with HTTP info returned
         * @return ApiResponse&lt;ReceivingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceivingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return receivingJobStatusWithHttpInfo(receivingJobId, jobs, tenantCode, start, limit);
        }

        /**
         * Execute receivingJobStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {
            return receivingJobStatusAsync(receivingJobId, jobs, tenantCode, start, limit, _callback);
        }
    }

    /**
     * Retrieve a receiving job’s status
     * After completing a transfer session, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier’s data store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
     * @param receivingJobId The **dataReceivingJobId** provided after a data transfer session completes. See **&#x60;/v1/op/jobs/receiving-jobs&#x60;**. (required)
     * @return ReceivingJobStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ReceivingJobStatusRequestBuilder receivingJobStatus(String receivingJobId) throws IllegalArgumentException {
        if (receivingJobId == null) throw new IllegalArgumentException("\"receivingJobId\" is required but got null");
            

        return new ReceivingJobStatusRequestBuilder(receivingJobId);
    }
    private okhttp3.Call startTransferCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-transfer-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTransferValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return startTransferCall(_callback);

    }


    private ApiResponse<StartTransferResponse> startTransferWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = startTransferValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StartTransferResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startTransferAsync(final ApiCallback<StartTransferResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTransferValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StartTransferResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartTransferRequestBuilder {

        private StartTransferRequestBuilder() {
        }

        /**
         * Build call for startTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return startTransferCall(_callback);
        }


        /**
         * Execute startTransfer request
         * @return StartTransferResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public StartTransferResponse execute() throws ApiException {
            ApiResponse<StartTransferResponse> localVarResp = startTransferWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startTransfer request with HTTP info returned
         * @return ApiResponse&lt;StartTransferResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StartTransferResponse> executeWithHttpInfo() throws ApiException {
            return startTransferWithHttpInfo();
        }

        /**
         * Execute startTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StartTransferResponse> _callback) throws ApiException {
            return startTransferAsync(_callback);
        }
    }

    /**
     * Start a transfer session
     * Use this API to start a new transfer session. A transfer session can include one or more batches of records to be  sent to Visier. Batches of records may be transferred as JSON or file payloads.   Recommended: For optimal performance, please include all batches of records in a single transfer session.
     * @return StartTransferRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public StartTransferRequestBuilder startTransfer() throws IllegalArgumentException {
        return new StartTransferRequestBuilder();
    }
    private okhttp3.Call uploadDataCall(String transferSessionId, Object body, String sourceId, String sequence, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/op/data-transfer-sessions/{transferSessionId}/upload"
            .replace("{" + "transferSessionId" + "}", localVarApiClient.escapeString(transferSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        if (sequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequence", sequence));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDataValidateBeforeCall(String transferSessionId, Object body, String sourceId, String sequence, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferSessionId' is set
        if (transferSessionId == null) {
            throw new ApiException("Missing the required parameter 'transferSessionId' when calling uploadData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadData(Async)");
        }

        return uploadDataCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);

    }


    private ApiResponse<PushDataResponse> uploadDataWithHttpInfo(String transferSessionId, Object body, String sourceId, String sequence, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = uploadDataValidateBeforeCall(transferSessionId, body, sourceId, sequence, tenantCode, null);
        Type localVarReturnType = new TypeToken<PushDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadDataAsync(String transferSessionId, Object body, String sourceId, String sequence, String tenantCode, final ApiCallback<PushDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDataValidateBeforeCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<PushDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadDataRequestBuilder {
        private final String transferSessionId;
        private String sourceId;
        private String sequence;
        private String tenantCode;
        private Object body;

        private UploadDataRequestBuilder(String transferSessionId) {
            this.transferSessionId = transferSessionId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UploadDataRequestBuilder
         */
        public UploadDataRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Set sourceId
         * @param sourceId The unique identifier associated with the source you want to transfer data to. (optional)
         * @return UploadDataRequestBuilder
         */
        public UploadDataRequestBuilder sourceId(String sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        /**
         * Set sequence
         * @param sequence The unique sequence number associated with a batch of records. (optional)
         * @return UploadDataRequestBuilder
         */
        public UploadDataRequestBuilder sequence(String sequence) {
            this.sequence = sequence;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The code of the tenant you want to transfer data to. For example, WFF_j1r or WFF_j1r~c7o. (optional)
         * @return UploadDataRequestBuilder
         */
        public UploadDataRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for uploadData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return uploadDataCall(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute uploadData request
         * @return PushDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PushDataResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<PushDataResponse> localVarResp = uploadDataWithHttpInfo(transferSessionId, body, sourceId, sequence, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadData request with HTTP info returned
         * @return ApiResponse&lt;PushDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PushDataResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return uploadDataWithHttpInfo(transferSessionId, body, sourceId, sequence, tenantCode);
        }

        /**
         * Execute uploadData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PushDataResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return uploadDataAsync(transferSessionId, body, sourceId, sequence, tenantCode, _callback);
        }
    }

    /**
     * Transfer data to sources via file upload
     * This API allows you to upload data to Visier as CSV or ZIP files. Each request transfers a single file. If the  data intended for Visier is stored in multiple files, you may compress them into a single ZIP file or make  multiple requests within the same transfer session.   File size limit: 3 GB   Each file is identified by a sequence number. Sequence numbers help identify any batches that were delivered incorrectly.   If you define a specific source in the request, all files within the request will target the declared source. If  a source is not defined, the filenames are matched against the source regex to correctly assign each file to a  source. To find out the source regex, please contact Visier Customer Success.   Note: If you include files that should target multiple sources in one ZIP file, do not define a source in the request.   Analytic tenants: For optimal transfer speed, provide one ZIP file per source.  Administrating tenants: For optimal transfer speed, provide one ZIP file containing all the required data files for your analytic tenants.  In the ZIP file, use one folder per analytic tenant. The ZIP file must adhere to the following file structure:   File1.zip  - Folder1: WFF_tenantCode1     - Filename1.csv     - Filename2.csv  - Folder2: WFF_tenantCode2     - Filename3.csv     - Filename4.csv
     * @param transferSessionId The transfer session ID returned after the data transfer session starts. (required)
     * @param body  (required)
     * @return UploadDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UploadDataRequestBuilder uploadData(String transferSessionId) throws IllegalArgumentException {
        if (transferSessionId == null) throw new IllegalArgumentException("\"transferSessionId\" is required but got null");
            

        return new UploadDataRequestBuilder(transferSessionId);
    }
}
